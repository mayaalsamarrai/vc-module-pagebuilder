import { BlockValuesModel } from '@shared/models';
import { createAction, props } from '@ngrx/store';

import { PageModel } from '../models/page.model';
import { BlockSchema, BlocksSchema } from 'src/app/modules/shared/models';
import { HttpErrorResponse } from '@angular/common/http';
import { CdkDragSortEvent } from '@angular/cdk/drag-drop';

export const addPageItem = createAction('[Page] Add Page Item', props<{ block: BlockValuesModel }>());
export const blocksSchemaFail = createAction('[Page] Blocks Schema Fail', props<{error: HttpErrorResponse}>());
export const blocksSchemaLoaded = createAction('[Page] Blocks Schema Loaded', props<{schema: BlocksSchema}>());
export const clearPageChanges = createAction('[Page] Clear Page Changes');
export const clonePageItem = createAction('[Page] Clone Page Item',
                                props<{ originalBlock: BlockValuesModel, newBlock: BlockValuesModel }>());
export const closeEditors = createAction('[Page] Close Editors');
export const completeEditPageItem = createAction('[Page] Complete Edit Page Item');
export const copyPageItem = createAction('[Page] Copy Page Item', props<{ sourceBlock: BlockValuesModel }>());
export const createPageItem = createAction('[Page] Create Page Item', props<{ newItemSchema: BlockSchema }>());
export const loadBlocksSchema = createAction('[Page] Load Blocks Schema');
export const swapBlocks = createAction('[Page] Swap Blocks', props<{ previousIndex: number, currentIndex: number }>());
export const loadPage = createAction('[Page] Load Page');
export const loadPageFail = createAction('[Page] Load Page Fail', props<{ error: HttpErrorResponse }>());
export const loadPageSuccess = createAction('[Page] Load Page Success', props<{ page: PageModel }>());
export const reloadPage = createAction('[Page] ReLoad Page');
export const reloadPageFail = createAction('[Page] ReLoad Page Fail', props<{ error: HttpErrorResponse }>());
export const reloadPageSuccess = createAction('[Page] ReLoad Page Success', props<{ page: PageModel }>());
export const moveBlock = createAction('[Page] Move Block', props<{ previousIndex: number, currentIndex: number }>());
export const orderChanged = createAction('[Page] Order Changed', props<{ previousIndex: number, currentIndex: number }>());
export const previewPageItem = createAction('[Page] Preview Page Item', props<{ block: BlockValuesModel }>());
export const previewPageItemOfType = createAction('[Page] Preview Page Item Of Type', props<{ blockSchema: BlockSchema }>());
export const removePageItem = createAction('[Page] Remove Page Item', props<{ block: BlockValuesModel }>());
export const savePage = createAction('[Page] Save Page');
export const savePageFail = createAction('[Page] Save Page Fail', props<{ error: any }>());
export const savePageSuccess = createAction('[Page] Save Page Success');
export const selectPageItem = createAction('[Page] Select Page Item', props<{ blockId: number }>());
export const toggleNewBlockPane = createAction('[Page] Toggle New Block Pane', props<{ display: boolean }>());
export const updateBlockPreview = createAction('[Page] Update Block Preview', props<{ block: BlockValuesModel }>());
export const updatePageItem = createAction('[Page] Update Page Item', props<{ block: BlockValuesModel }>());
export const toggleItemVisibility = createAction('[Page] Toggle Item Visibility', props<{ block: BlockValuesModel }>());
export const markSectionHoveredInPreview = createAction('[Page] Mark Section Hovered In Preview', props<{ blockId: number }>());
export const highlightInPreview = createAction('[Page] Highlight In Preview', props<{ block: BlockValuesModel }>());
export const setEditorMode = createAction('[Page] Set Editor Mode', props<{ mode: string }>());
